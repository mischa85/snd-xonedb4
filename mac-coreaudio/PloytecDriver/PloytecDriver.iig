#ifndef PloytecDriver_h
#define PloytecDriver_h

#include <DriverKit/IOService.iig>
#include <AudioDriverKit/IOUserAudioDriver.iig>
#include "PloytecDevice.iig"
#include "PloytecDriverUserClient.iig"

using namespace AudioDriverKit;

struct PloytecDriver_IVars
{
	OSSharedPtr<IODispatchQueue>		workQueue;
	OSSharedPtr<PloytecDevice>		audioDevice;

	IOUSBHostDevice				*usbDevice;
	IOUSBHostInterface			*usbInterface0;
	IOUSBHostInterface			*usbInterface1;
	IOUSBHostPipe				*usbMIDIinPipe;
	IOUSBHostPipe				*usbPCMoutPipe;
	IOUSBHostPipe				*usbPCMinPipe;
	OSAction				*usbPCMoutCallback;
	OSAction				*usbPCMinCallback;
	OSAction				*usbMIDIinCallback;

	OSSharedPtr<IOBufferMemoryDescriptor>	usbRXBufferCONTROL;
	OSSharedPtr<IOBufferMemoryDescriptor>	MIDIBuffer;
	uint8_t					*MIDIBufferAddr;
	uint8_t					midiRingHead;
	uint8_t					midiRingTail;
	OSSharedPtr<IOBufferMemoryDescriptor> 	usbTXBufferPCMandUART;
	uint8_t					*usbTXBufferPCMandUARTAddr;
	OSSharedPtr<IOMemoryDescriptor>		usbTXBufferPCMandUARTSegment[32768];
	uint8_t					*usbTXBufferPCMandUARTSegmentAddr[32768];
	uint16_t				usbTXBufferPCMandUARTCurrentSegment;
	OSSharedPtr<IOBufferMemoryDescriptor> 	usbRXBufferPCM;
	OSSharedPtr<IOMemoryDescriptor>		usbRXBufferPCMSegment[32768];
	uint16_t				usbRXBufferPCMCurrentSegment;
	OSSharedPtr<IOBufferMemoryDescriptor> 	usbRXBufferMIDI;
	uint8_t					*usbRXBufferMIDIAddr;
	uint8_t					usbCurrentUrbCount;
	uint32_t				usbOutputPacketSize;
	uint16_t				usbCurrentOutputFramesCount;
	uint32_t				usbInputPacketSize;
	uint16_t				usbCurrentInputFramesCount;
	bool					usbShutdownInProgress = false;
	uint8_t					usbPCMoutAbortedCount;
	uint8_t					usbPCMinAbortedCount;
	uint8_t					usbMIDIinAbortedCount;
	uint16_t				usbMIDIbyteNo;
	uint64_t				usbPCMoutFramesCount;
	uint64_t				usbPCMinFramesCount;
	uint64_t				usbMIDIoutBytesCount;
	uint64_t				usbMIDIinBytesCount;

	char					*firmwarever;
	IOBufferMemoryDescriptor		*sampleratebytes;
	OSSharedPtr<OSString>			FirmwareVersionBytes;
	OSSharedPtr<OSString>			manufacturer_uid;
	OSSharedPtr<OSString>			device_name;
	char 					*manufacturer_utf8;
	char 					*device_name_utf8;

	TransferMode				transferMode;
	
	IOUserClient*				midiUserClient = nullptr;
	PloytecDriverUserClient*		midiClient = nullptr;
	uint8_t					midiParserRunningStatus = 0;
	uint8_t					midiParserBytes[3];
	uint8_t					midiParserIndex = 0;
};

class PloytecDriver: public IOUserAudioDriver
{	
public:
	virtual bool init() override;
	virtual kern_return_t Start(IOService *provider) override;
	virtual kern_return_t Stop(IOService *provider) override;
	virtual kern_return_t NewUserClient(uint32_t in_type, IOUserClient** out_user_client) override;
	virtual void free() override;
	virtual kern_return_t StartDevice(IOUserAudioObjectID in_object_id, IOUserAudioStartStopFlags in_flags) override;
	virtual kern_return_t StopDevice(IOUserAudioObjectID in_object_id, IOUserAudioStartStopFlags in_flags) override;
	virtual OSData* GetFirmwareVer() LOCALONLY;
	virtual OSData* GetDeviceName() LOCALONLY;
	virtual OSData* GetDeviceManufacturer() LOCALONLY;
	kern_return_t GetPlaybackStats(playbackstats *stats) LOCALONLY;

	virtual void WriteMIDIBytes(const uint64_t msg) LOCALONLY;
	virtual bool ReadMIDIByte(uint8_t &outByte) LOCALONLY;

	virtual void AbortUSBUrbs(uint8_t num) LOCALONLY;
	virtual kern_return_t SendPCMUrbs(uint8_t num) LOCALONLY;
	virtual kern_return_t SendMIDIUrbs(uint8_t num) LOCALONLY;
	virtual uint8_t GetCurrentUrbCount() LOCALONLY;
	virtual void SetCurrentUrbCount(uint8_t num) LOCALONLY;
	virtual uint16_t GetCurrentInputFramesCount() LOCALONLY;
	virtual void SetFrameCount(uint16_t inputCount, uint16_t outputCount) LOCALONLY;
	virtual uint16_t GetCurrentOutputFramesCount() LOCALONLY;
	virtual kern_return_t CreateUSBTXBuffersPCMandUART(uint32_t outputPacketSize) LOCALONLY;
	virtual kern_return_t CreateUSBRXBuffersPCM(uint32_t inputPacketSize) LOCALONLY;
	virtual kern_return_t CreateUSBHandlers() LOCALONLY;
	virtual kern_return_t CreateUSBPipes() LOCALONLY;

protected:
	virtual kern_return_t PCMinHandler(OSAction *action, IOReturn status, uint32_t actualByteCount, uint64_t completionTimestamp);
	virtual kern_return_t PCMoutHandler(OSAction *action, IOReturn status, uint32_t actualByteCount, uint64_t completionTimestamp);
	virtual kern_return_t MIDIinHandler(OSAction *action, IOReturn status, uint32_t actualByteCount, uint64_t completionTimestamp);
};

#endif /* PloytecDriver_h */
