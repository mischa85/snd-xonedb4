#ifndef PloytecDevice_h
#define PloytecDevice_h

#include <DriverKit/DriverKit.iig>
#include <AudioDriverKit/IOUserAudioDevice.iig>
#include <USBDriverKit/IOUSBHostPipe.iig>
#include <USBDriverKit/IOUSBHostInterface.iig>
#include "PloytecSharedTypes.iig"

using namespace AudioDriverKit;

class IOUserAudioDriver;

class PloytecDevice: public IOUserAudioDevice
{
public:
	virtual bool init(IOUserAudioDriver* in_driver, bool in_supports_prewarming, OSString* in_device_uid, OSString* in_model_uid, OSString* in_manufacturer_uid, uint32_t in_zero_timestamp_period, IOBufferMemoryDescriptor* receiveBuffer, IOBufferMemoryDescriptor* transmitBuffer, TransferMode transferMode) LOCALONLY;
	virtual kern_return_t StartIO(IOUserAudioStartStopFlags in_flags) final LOCALONLY;
	virtual kern_return_t StopIO(IOUserAudioStartStopFlags in_flags) final LOCALONLY;
	virtual kern_return_t PerformDeviceConfigurationChange(uint64_t change_action, OSObject* in_change_info) final LOCALONLY;
	virtual kern_return_t AbortDeviceConfigurationChange(uint64_t change_action, OSObject* in_change_info) final LOCALONLY;
	virtual void free() override LOCALONLY;
	virtual kern_return_t GetPlaybackStats(playbackstats *stats) LOCALONLY;
	virtual bool Playback(uint16_t &currentpos, uint16_t frameCount, uint64_t completionTimestamp) LOCALONLY;
	virtual bool Capture(uint16_t &currentpos, uint16_t frameCount, uint64_t completionTimestamp) LOCALONLY;

private:
	void EncodePloytecPCM(uint8_t *dst, uint8_t *src) LOCALONLY;
	void DecodePloytecPCM(uint8_t *dst, uint8_t *src) LOCALONLY;
};

#endif /* PloytecDevice_h */
